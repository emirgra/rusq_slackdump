// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rusq/slackdump/v3/internal/chunk/backend/dbase/repository (interfaces: MessageRepository)
//
// Generated by this command:
//
//	mockgen -destination=mock_repository/mock_message.go . MessageRepository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	iter "iter"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	chunk "github.com/rusq/slackdump/v3/internal/chunk"
	repository "github.com/rusq/slackdump/v3/internal/chunk/backend/dbase/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageRepository is a mock of MessageRepository interface.
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
	isgomock struct{}
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository.
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance.
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// AllForChunk mocks base method.
func (m *MockMessageRepository) AllForChunk(ctx context.Context, conn sqlx.QueryerContext, chunkID int64) (iter.Seq2[repository.DBMessage, error], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllForChunk", ctx, conn, chunkID)
	ret0, _ := ret[0].(iter.Seq2[repository.DBMessage, error])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllForChunk indicates an expected call of AllForChunk.
func (mr *MockMessageRepositoryMockRecorder) AllForChunk(ctx, conn, chunkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllForChunk", reflect.TypeOf((*MockMessageRepository)(nil).AllForChunk), ctx, conn, chunkID)
}

// AllForID mocks base method.
func (m *MockMessageRepository) AllForID(ctx context.Context, conn sqlx.QueryerContext, channelID string) (iter.Seq2[repository.DBMessage, error], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllForID", ctx, conn, channelID)
	ret0, _ := ret[0].(iter.Seq2[repository.DBMessage, error])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllForID indicates an expected call of AllForID.
func (mr *MockMessageRepositoryMockRecorder) AllForID(ctx, conn, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllForID", reflect.TypeOf((*MockMessageRepository)(nil).AllForID), ctx, conn, channelID)
}

// AllForThread mocks base method.
func (m *MockMessageRepository) AllForThread(ctx context.Context, conn sqlx.QueryerContext, channelID, threadID string) (iter.Seq2[repository.DBMessage, error], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllForThread", ctx, conn, channelID, threadID)
	ret0, _ := ret[0].(iter.Seq2[repository.DBMessage, error])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllForThread indicates an expected call of AllForThread.
func (mr *MockMessageRepositoryMockRecorder) AllForThread(ctx, conn, channelID, threadID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllForThread", reflect.TypeOf((*MockMessageRepository)(nil).AllForThread), ctx, conn, channelID, threadID)
}

// Count mocks base method.
func (m *MockMessageRepository) Count(ctx context.Context, conn sqlx.QueryerContext, channelID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, conn, channelID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockMessageRepositoryMockRecorder) Count(ctx, conn, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockMessageRepository)(nil).Count), ctx, conn, channelID)
}

// CountThread mocks base method.
func (m *MockMessageRepository) CountThread(ctx context.Context, conn sqlx.QueryerContext, channelID, threadID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountThread", ctx, conn, channelID, threadID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountThread indicates an expected call of CountThread.
func (mr *MockMessageRepositoryMockRecorder) CountThread(ctx, conn, channelID, threadID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountThread", reflect.TypeOf((*MockMessageRepository)(nil).CountThread), ctx, conn, channelID, threadID)
}

// CountThreadOnlyParts mocks base method.
func (m *MockMessageRepository) CountThreadOnlyParts(ctx context.Context, conn sqlx.QueryerContext, sessionID int64, channelID, threadID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountThreadOnlyParts", ctx, conn, sessionID, channelID, threadID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountThreadOnlyParts indicates an expected call of CountThreadOnlyParts.
func (mr *MockMessageRepositoryMockRecorder) CountThreadOnlyParts(ctx, conn, sessionID, channelID, threadID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountThreadOnlyParts", reflect.TypeOf((*MockMessageRepository)(nil).CountThreadOnlyParts), ctx, conn, sessionID, channelID, threadID)
}

// CountUnfinished mocks base method.
func (m *MockMessageRepository) CountUnfinished(ctx context.Context, conn sqlx.QueryerContext, sessionID int64, channelID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUnfinished", ctx, conn, sessionID, channelID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUnfinished indicates an expected call of CountUnfinished.
func (mr *MockMessageRepositoryMockRecorder) CountUnfinished(ctx, conn, sessionID, channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUnfinished", reflect.TypeOf((*MockMessageRepository)(nil).CountUnfinished), ctx, conn, sessionID, channelID)
}

// Get mocks base method.
func (m *MockMessageRepository) Get(ctx context.Context, conn sqlx.ExtContext, id any) (repository.DBMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, conn, id)
	ret0, _ := ret[0].(repository.DBMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMessageRepositoryMockRecorder) Get(ctx, conn, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMessageRepository)(nil).Get), ctx, conn, id)
}

// GetType mocks base method.
func (m *MockMessageRepository) GetType(ctx context.Context, conn sqlx.ExtContext, id any, ct ...chunk.ChunkType) (repository.DBMessage, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, conn, id}
	for _, a := range ct {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetType", varargs...)
	ret0, _ := ret[0].(repository.DBMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetType indicates an expected call of GetType.
func (mr *MockMessageRepositoryMockRecorder) GetType(ctx, conn, id any, ct ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, conn, id}, ct...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockMessageRepository)(nil).GetType), varargs...)
}

// Insert mocks base method.
func (m *MockMessageRepository) Insert(ctx context.Context, conn sqlx.ExtContext, t ...*repository.DBMessage) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, conn}
	for _, a := range t {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockMessageRepositoryMockRecorder) Insert(ctx, conn any, t ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, conn}, t...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockMessageRepository)(nil).Insert), varargs...)
}

// InsertAll mocks base method.
func (m *MockMessageRepository) InsertAll(ctx context.Context, pconn repository.PrepareExtContext, tt iter.Seq2[*repository.DBMessage, error]) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAll", ctx, pconn, tt)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAll indicates an expected call of InsertAll.
func (mr *MockMessageRepositoryMockRecorder) InsertAll(ctx, pconn, tt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAll", reflect.TypeOf((*MockMessageRepository)(nil).InsertAll), ctx, pconn, tt)
}

// LatestMessages mocks base method.
func (m *MockMessageRepository) LatestMessages(ctx context.Context, conn sqlx.QueryerContext) (iter.Seq2[repository.LatestMessage, error], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestMessages", ctx, conn)
	ret0, _ := ret[0].(iter.Seq2[repository.LatestMessage, error])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestMessages indicates an expected call of LatestMessages.
func (mr *MockMessageRepositoryMockRecorder) LatestMessages(ctx, conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestMessages", reflect.TypeOf((*MockMessageRepository)(nil).LatestMessages), ctx, conn)
}

// LatestThreads mocks base method.
func (m *MockMessageRepository) LatestThreads(ctx context.Context, conn sqlx.QueryerContext) (iter.Seq2[repository.LatestThread, error], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestThreads", ctx, conn)
	ret0, _ := ret[0].(iter.Seq2[repository.LatestThread, error])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestThreads indicates an expected call of LatestThreads.
func (mr *MockMessageRepositoryMockRecorder) LatestThreads(ctx, conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestThreads", reflect.TypeOf((*MockMessageRepository)(nil).LatestThreads), ctx, conn)
}

// OneForChunk mocks base method.
func (m *MockMessageRepository) OneForChunk(ctx context.Context, conn sqlx.QueryerContext, chunkID int64) (repository.DBMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OneForChunk", ctx, conn, chunkID)
	ret0, _ := ret[0].(repository.DBMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OneForChunk indicates an expected call of OneForChunk.
func (mr *MockMessageRepositoryMockRecorder) OneForChunk(ctx, conn, chunkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OneForChunk", reflect.TypeOf((*MockMessageRepository)(nil).OneForChunk), ctx, conn, chunkID)
}

// Sorted mocks base method.
func (m *MockMessageRepository) Sorted(ctx context.Context, conn sqlx.QueryerContext, channelID string, order repository.Order) (iter.Seq2[repository.DBMessage, error], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sorted", ctx, conn, channelID, order)
	ret0, _ := ret[0].(iter.Seq2[repository.DBMessage, error])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sorted indicates an expected call of Sorted.
func (mr *MockMessageRepositoryMockRecorder) Sorted(ctx, conn, channelID, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sorted", reflect.TypeOf((*MockMessageRepository)(nil).Sorted), ctx, conn, channelID, order)
}
