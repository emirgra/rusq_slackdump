// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rusq/slackdump/v3/internal/chunk/backend/dbase/repository (interfaces: SearchFileRepository)
//
// Generated by this command:
//
//	mockgen -destination=mock_repository/mock_search_file.go . SearchFileRepository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	iter "iter"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	chunk "github.com/rusq/slackdump/v3/internal/chunk"
	repository "github.com/rusq/slackdump/v3/internal/chunk/backend/dbase/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockSearchFileRepository is a mock of SearchFileRepository interface.
type MockSearchFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSearchFileRepositoryMockRecorder
	isgomock struct{}
}

// MockSearchFileRepositoryMockRecorder is the mock recorder for MockSearchFileRepository.
type MockSearchFileRepositoryMockRecorder struct {
	mock *MockSearchFileRepository
}

// NewMockSearchFileRepository creates a new mock instance.
func NewMockSearchFileRepository(ctrl *gomock.Controller) *MockSearchFileRepository {
	mock := &MockSearchFileRepository{ctrl: ctrl}
	mock.recorder = &MockSearchFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchFileRepository) EXPECT() *MockSearchFileRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockSearchFileRepository) All(ctx context.Context, conn sqlx.QueryerContext) (iter.Seq2[repository.DBSearchFile, error], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, conn)
	ret0, _ := ret[0].(iter.Seq2[repository.DBSearchFile, error])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockSearchFileRepositoryMockRecorder) All(ctx, conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockSearchFileRepository)(nil).All), ctx, conn)
}

// AllForChunk mocks base method.
func (m *MockSearchFileRepository) AllForChunk(ctx context.Context, conn sqlx.QueryerContext, chunkID int64) (iter.Seq2[repository.DBSearchFile, error], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllForChunk", ctx, conn, chunkID)
	ret0, _ := ret[0].(iter.Seq2[repository.DBSearchFile, error])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllForChunk indicates an expected call of AllForChunk.
func (mr *MockSearchFileRepositoryMockRecorder) AllForChunk(ctx, conn, chunkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllForChunk", reflect.TypeOf((*MockSearchFileRepository)(nil).AllForChunk), ctx, conn, chunkID)
}

// AllOfType mocks base method.
func (m *MockSearchFileRepository) AllOfType(ctx context.Context, conn sqlx.QueryerContext, chunkTypeID ...chunk.ChunkType) (iter.Seq2[repository.DBSearchFile, error], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, conn}
	for _, a := range chunkTypeID {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllOfType", varargs...)
	ret0, _ := ret[0].(iter.Seq2[repository.DBSearchFile, error])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllOfType indicates an expected call of AllOfType.
func (mr *MockSearchFileRepositoryMockRecorder) AllOfType(ctx, conn any, chunkTypeID ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, conn}, chunkTypeID...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllOfType", reflect.TypeOf((*MockSearchFileRepository)(nil).AllOfType), varargs...)
}

// Count mocks base method.
func (m *MockSearchFileRepository) Count(ctx context.Context, conn sqlx.QueryerContext) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, conn)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockSearchFileRepositoryMockRecorder) Count(ctx, conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockSearchFileRepository)(nil).Count), ctx, conn)
}

// CountType mocks base method.
func (m *MockSearchFileRepository) CountType(ctx context.Context, conn sqlx.QueryerContext, chunkTypeID ...chunk.ChunkType) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, conn}
	for _, a := range chunkTypeID {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountType", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountType indicates an expected call of CountType.
func (mr *MockSearchFileRepositoryMockRecorder) CountType(ctx, conn any, chunkTypeID ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, conn}, chunkTypeID...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountType", reflect.TypeOf((*MockSearchFileRepository)(nil).CountType), varargs...)
}

// Get mocks base method.
func (m *MockSearchFileRepository) Get(ctx context.Context, conn sqlx.ExtContext, id any) (repository.DBSearchFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, conn, id)
	ret0, _ := ret[0].(repository.DBSearchFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSearchFileRepositoryMockRecorder) Get(ctx, conn, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSearchFileRepository)(nil).Get), ctx, conn, id)
}

// GetType mocks base method.
func (m *MockSearchFileRepository) GetType(ctx context.Context, conn sqlx.ExtContext, id any, ct ...chunk.ChunkType) (repository.DBSearchFile, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, conn, id}
	for _, a := range ct {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetType", varargs...)
	ret0, _ := ret[0].(repository.DBSearchFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetType indicates an expected call of GetType.
func (mr *MockSearchFileRepositoryMockRecorder) GetType(ctx, conn, id any, ct ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, conn, id}, ct...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockSearchFileRepository)(nil).GetType), varargs...)
}

// Insert mocks base method.
func (m *MockSearchFileRepository) Insert(ctx context.Context, conn sqlx.ExtContext, t ...*repository.DBSearchFile) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, conn}
	for _, a := range t {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockSearchFileRepositoryMockRecorder) Insert(ctx, conn any, t ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, conn}, t...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSearchFileRepository)(nil).Insert), varargs...)
}

// InsertAll mocks base method.
func (m *MockSearchFileRepository) InsertAll(ctx context.Context, pconn repository.PrepareExtContext, tt iter.Seq2[*repository.DBSearchFile, error]) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAll", ctx, pconn, tt)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAll indicates an expected call of InsertAll.
func (mr *MockSearchFileRepositoryMockRecorder) InsertAll(ctx, pconn, tt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAll", reflect.TypeOf((*MockSearchFileRepository)(nil).InsertAll), ctx, pconn, tt)
}

// OneForChunk mocks base method.
func (m *MockSearchFileRepository) OneForChunk(ctx context.Context, conn sqlx.QueryerContext, chunkID int64) (repository.DBSearchFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OneForChunk", ctx, conn, chunkID)
	ret0, _ := ret[0].(repository.DBSearchFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OneForChunk indicates an expected call of OneForChunk.
func (mr *MockSearchFileRepositoryMockRecorder) OneForChunk(ctx, conn, chunkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OneForChunk", reflect.TypeOf((*MockSearchFileRepository)(nil).OneForChunk), ctx, conn, chunkID)
}
