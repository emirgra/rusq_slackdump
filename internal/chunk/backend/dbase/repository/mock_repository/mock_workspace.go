// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rusq/slackdump/v3/internal/chunk/backend/dbase/repository (interfaces: WorkspaceRepository)
//
// Generated by this command:
//
//	mockgen -destination=mock_repository/mock_workspace.go . WorkspaceRepository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	iter "iter"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	repository "github.com/rusq/slackdump/v3/internal/chunk/backend/dbase/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockWorkspaceRepository is a mock of WorkspaceRepository interface.
type MockWorkspaceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceRepositoryMockRecorder
	isgomock struct{}
}

// MockWorkspaceRepositoryMockRecorder is the mock recorder for MockWorkspaceRepository.
type MockWorkspaceRepositoryMockRecorder struct {
	mock *MockWorkspaceRepository
}

// NewMockWorkspaceRepository creates a new mock instance.
func NewMockWorkspaceRepository(ctrl *gomock.Controller) *MockWorkspaceRepository {
	mock := &MockWorkspaceRepository{ctrl: ctrl}
	mock.recorder = &MockWorkspaceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceRepository) EXPECT() *MockWorkspaceRepositoryMockRecorder {
	return m.recorder
}

// AllForChunk mocks base method.
func (m *MockWorkspaceRepository) AllForChunk(ctx context.Context, conn sqlx.QueryerContext, chunkID int64) (iter.Seq2[repository.DBWorkspace, error], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllForChunk", ctx, conn, chunkID)
	ret0, _ := ret[0].(iter.Seq2[repository.DBWorkspace, error])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllForChunk indicates an expected call of AllForChunk.
func (mr *MockWorkspaceRepositoryMockRecorder) AllForChunk(ctx, conn, chunkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllForChunk", reflect.TypeOf((*MockWorkspaceRepository)(nil).AllForChunk), ctx, conn, chunkID)
}

// GetWorkspace mocks base method.
func (m *MockWorkspaceRepository) GetWorkspace(ctx context.Context, conn sqlx.QueryerContext) (repository.DBWorkspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspace", ctx, conn)
	ret0, _ := ret[0].(repository.DBWorkspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspace indicates an expected call of GetWorkspace.
func (mr *MockWorkspaceRepositoryMockRecorder) GetWorkspace(ctx, conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspace", reflect.TypeOf((*MockWorkspaceRepository)(nil).GetWorkspace), ctx, conn)
}

// Insert mocks base method.
func (m *MockWorkspaceRepository) Insert(ctx context.Context, conn sqlx.ExtContext, t ...*repository.DBWorkspace) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, conn}
	for _, a := range t {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockWorkspaceRepositoryMockRecorder) Insert(ctx, conn any, t ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, conn}, t...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockWorkspaceRepository)(nil).Insert), varargs...)
}

// InsertAll mocks base method.
func (m *MockWorkspaceRepository) InsertAll(ctx context.Context, pconn repository.PrepareExtContext, tt iter.Seq2[*repository.DBWorkspace, error]) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAll", ctx, pconn, tt)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAll indicates an expected call of InsertAll.
func (mr *MockWorkspaceRepositoryMockRecorder) InsertAll(ctx, pconn, tt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAll", reflect.TypeOf((*MockWorkspaceRepository)(nil).InsertAll), ctx, pconn, tt)
}

// OneForChunk mocks base method.
func (m *MockWorkspaceRepository) OneForChunk(ctx context.Context, conn sqlx.QueryerContext, chunkID int64) (repository.DBWorkspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OneForChunk", ctx, conn, chunkID)
	ret0, _ := ret[0].(repository.DBWorkspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OneForChunk indicates an expected call of OneForChunk.
func (mr *MockWorkspaceRepositoryMockRecorder) OneForChunk(ctx, conn, chunkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OneForChunk", reflect.TypeOf((*MockWorkspaceRepository)(nil).OneForChunk), ctx, conn, chunkID)
}
