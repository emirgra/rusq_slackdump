// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rusq/slackdump/v3/internal/client (interfaces: SlackClienter,Slack,SlackEdge)
//
// Generated by this command:
//
//	mockgen -destination mock_client/mock_client.go . SlackClienter,Slack,SlackEdge
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	io "io"
	reflect "reflect"

	slack "github.com/rusq/slack"
	edge "github.com/rusq/slackdump/v3/internal/edge"
	gomock "go.uber.org/mock/gomock"
)

// MockSlackClienter is a mock of SlackClienter interface.
type MockSlackClienter struct {
	ctrl     *gomock.Controller
	recorder *MockSlackClienterMockRecorder
	isgomock struct{}
}

// MockSlackClienterMockRecorder is the mock recorder for MockSlackClienter.
type MockSlackClienterMockRecorder struct {
	mock *MockSlackClienter
}

// NewMockSlackClienter creates a new mock instance.
func NewMockSlackClienter(ctrl *gomock.Controller) *MockSlackClienter {
	mock := &MockSlackClienter{ctrl: ctrl}
	mock.recorder = &MockSlackClienterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlackClienter) EXPECT() *MockSlackClienterMockRecorder {
	return m.recorder
}

// AuthTestContext mocks base method.
func (m *MockSlackClienter) AuthTestContext(ctx context.Context) (*slack.AuthTestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthTestContext", ctx)
	ret0, _ := ret[0].(*slack.AuthTestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTestContext indicates an expected call of AuthTestContext.
func (mr *MockSlackClienterMockRecorder) AuthTestContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTestContext", reflect.TypeOf((*MockSlackClienter)(nil).AuthTestContext), ctx)
}

// Client mocks base method.
func (m *MockSlackClienter) Client() (*slack.Client, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(*slack.Client)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Client indicates an expected call of Client.
func (mr *MockSlackClienterMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockSlackClienter)(nil).Client))
}

// GetConversationHistoryContext mocks base method.
func (m *MockSlackClienter) GetConversationHistoryContext(ctx context.Context, params *slack.GetConversationHistoryParameters) (*slack.GetConversationHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationHistoryContext", ctx, params)
	ret0, _ := ret[0].(*slack.GetConversationHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationHistoryContext indicates an expected call of GetConversationHistoryContext.
func (mr *MockSlackClienterMockRecorder) GetConversationHistoryContext(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationHistoryContext", reflect.TypeOf((*MockSlackClienter)(nil).GetConversationHistoryContext), ctx, params)
}

// GetConversationInfoContext mocks base method.
func (m *MockSlackClienter) GetConversationInfoContext(ctx context.Context, input *slack.GetConversationInfoInput) (*slack.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationInfoContext", ctx, input)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationInfoContext indicates an expected call of GetConversationInfoContext.
func (mr *MockSlackClienterMockRecorder) GetConversationInfoContext(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationInfoContext", reflect.TypeOf((*MockSlackClienter)(nil).GetConversationInfoContext), ctx, input)
}

// GetConversationRepliesContext mocks base method.
func (m *MockSlackClienter) GetConversationRepliesContext(ctx context.Context, params *slack.GetConversationRepliesParameters) ([]slack.Message, bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationRepliesContext", ctx, params)
	ret0, _ := ret[0].([]slack.Message)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetConversationRepliesContext indicates an expected call of GetConversationRepliesContext.
func (mr *MockSlackClienterMockRecorder) GetConversationRepliesContext(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationRepliesContext", reflect.TypeOf((*MockSlackClienter)(nil).GetConversationRepliesContext), ctx, params)
}

// GetConversationsContext mocks base method.
func (m *MockSlackClienter) GetConversationsContext(ctx context.Context, params *slack.GetConversationsParameters) ([]slack.Channel, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationsContext", ctx, params)
	ret0, _ := ret[0].([]slack.Channel)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConversationsContext indicates an expected call of GetConversationsContext.
func (mr *MockSlackClienterMockRecorder) GetConversationsContext(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationsContext", reflect.TypeOf((*MockSlackClienter)(nil).GetConversationsContext), ctx, params)
}

// GetEmojiContext mocks base method.
func (m *MockSlackClienter) GetEmojiContext(ctx context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmojiContext", ctx)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmojiContext indicates an expected call of GetEmojiContext.
func (mr *MockSlackClienterMockRecorder) GetEmojiContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmojiContext", reflect.TypeOf((*MockSlackClienter)(nil).GetEmojiContext), ctx)
}

// GetFileContext mocks base method.
func (m *MockSlackClienter) GetFileContext(ctx context.Context, downloadURL string, writer io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileContext", ctx, downloadURL, writer)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFileContext indicates an expected call of GetFileContext.
func (mr *MockSlackClienterMockRecorder) GetFileContext(ctx, downloadURL, writer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileContext", reflect.TypeOf((*MockSlackClienter)(nil).GetFileContext), ctx, downloadURL, writer)
}

// GetFileInfoContext mocks base method.
func (m *MockSlackClienter) GetFileInfoContext(ctx context.Context, fileID string, count, page int) (*slack.File, []slack.Comment, *slack.Paging, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfoContext", ctx, fileID, count, page)
	ret0, _ := ret[0].(*slack.File)
	ret1, _ := ret[1].([]slack.Comment)
	ret2, _ := ret[2].(*slack.Paging)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetFileInfoContext indicates an expected call of GetFileInfoContext.
func (mr *MockSlackClienterMockRecorder) GetFileInfoContext(ctx, fileID, count, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfoContext", reflect.TypeOf((*MockSlackClienter)(nil).GetFileInfoContext), ctx, fileID, count, page)
}

// GetStarredContext mocks base method.
func (m *MockSlackClienter) GetStarredContext(ctx context.Context, params slack.StarsParameters) ([]slack.StarredItem, *slack.Paging, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStarredContext", ctx, params)
	ret0, _ := ret[0].([]slack.StarredItem)
	ret1, _ := ret[1].(*slack.Paging)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStarredContext indicates an expected call of GetStarredContext.
func (mr *MockSlackClienterMockRecorder) GetStarredContext(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStarredContext", reflect.TypeOf((*MockSlackClienter)(nil).GetStarredContext), ctx, params)
}

// GetUserInfoContext mocks base method.
func (m *MockSlackClienter) GetUserInfoContext(ctx context.Context, user string) (*slack.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoContext", ctx, user)
	ret0, _ := ret[0].(*slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoContext indicates an expected call of GetUserInfoContext.
func (mr *MockSlackClienterMockRecorder) GetUserInfoContext(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoContext", reflect.TypeOf((*MockSlackClienter)(nil).GetUserInfoContext), ctx, user)
}

// GetUsersContext mocks base method.
func (m *MockSlackClienter) GetUsersContext(ctx context.Context, options ...slack.GetUsersOption) ([]slack.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsersContext", varargs...)
	ret0, _ := ret[0].([]slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersContext indicates an expected call of GetUsersContext.
func (mr *MockSlackClienterMockRecorder) GetUsersContext(ctx any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersContext", reflect.TypeOf((*MockSlackClienter)(nil).GetUsersContext), varargs...)
}

// GetUsersInConversationContext mocks base method.
func (m *MockSlackClienter) GetUsersInConversationContext(ctx context.Context, params *slack.GetUsersInConversationParameters) ([]string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersInConversationContext", ctx, params)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUsersInConversationContext indicates an expected call of GetUsersInConversationContext.
func (mr *MockSlackClienterMockRecorder) GetUsersInConversationContext(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersInConversationContext", reflect.TypeOf((*MockSlackClienter)(nil).GetUsersInConversationContext), ctx, params)
}

// GetUsersPaginated mocks base method.
func (m *MockSlackClienter) GetUsersPaginated(options ...slack.GetUsersOption) slack.UserPagination {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsersPaginated", varargs...)
	ret0, _ := ret[0].(slack.UserPagination)
	return ret0
}

// GetUsersPaginated indicates an expected call of GetUsersPaginated.
func (mr *MockSlackClienterMockRecorder) GetUsersPaginated(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersPaginated", reflect.TypeOf((*MockSlackClienter)(nil).GetUsersPaginated), options...)
}

// ListBookmarks mocks base method.
func (m *MockSlackClienter) ListBookmarks(channelID string) ([]slack.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBookmarks", channelID)
	ret0, _ := ret[0].([]slack.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBookmarks indicates an expected call of ListBookmarks.
func (mr *MockSlackClienterMockRecorder) ListBookmarks(channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBookmarks", reflect.TypeOf((*MockSlackClienter)(nil).ListBookmarks), channelID)
}

// SearchFilesContext mocks base method.
func (m *MockSlackClienter) SearchFilesContext(ctx context.Context, query string, params slack.SearchParameters) (*slack.SearchFiles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFilesContext", ctx, query, params)
	ret0, _ := ret[0].(*slack.SearchFiles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFilesContext indicates an expected call of SearchFilesContext.
func (mr *MockSlackClienterMockRecorder) SearchFilesContext(ctx, query, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilesContext", reflect.TypeOf((*MockSlackClienter)(nil).SearchFilesContext), ctx, query, params)
}

// SearchMessagesContext mocks base method.
func (m *MockSlackClienter) SearchMessagesContext(ctx context.Context, query string, params slack.SearchParameters) (*slack.SearchMessages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMessagesContext", ctx, query, params)
	ret0, _ := ret[0].(*slack.SearchMessages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMessagesContext indicates an expected call of SearchMessagesContext.
func (mr *MockSlackClienterMockRecorder) SearchMessagesContext(ctx, query, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMessagesContext", reflect.TypeOf((*MockSlackClienter)(nil).SearchMessagesContext), ctx, query, params)
}

// MockSlack is a mock of Slack interface.
type MockSlack struct {
	ctrl     *gomock.Controller
	recorder *MockSlackMockRecorder
	isgomock struct{}
}

// MockSlackMockRecorder is the mock recorder for MockSlack.
type MockSlackMockRecorder struct {
	mock *MockSlack
}

// NewMockSlack creates a new mock instance.
func NewMockSlack(ctrl *gomock.Controller) *MockSlack {
	mock := &MockSlack{ctrl: ctrl}
	mock.recorder = &MockSlackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlack) EXPECT() *MockSlackMockRecorder {
	return m.recorder
}

// AuthTestContext mocks base method.
func (m *MockSlack) AuthTestContext(ctx context.Context) (*slack.AuthTestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthTestContext", ctx)
	ret0, _ := ret[0].(*slack.AuthTestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTestContext indicates an expected call of AuthTestContext.
func (mr *MockSlackMockRecorder) AuthTestContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTestContext", reflect.TypeOf((*MockSlack)(nil).AuthTestContext), ctx)
}

// GetConversationHistoryContext mocks base method.
func (m *MockSlack) GetConversationHistoryContext(ctx context.Context, params *slack.GetConversationHistoryParameters) (*slack.GetConversationHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationHistoryContext", ctx, params)
	ret0, _ := ret[0].(*slack.GetConversationHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationHistoryContext indicates an expected call of GetConversationHistoryContext.
func (mr *MockSlackMockRecorder) GetConversationHistoryContext(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationHistoryContext", reflect.TypeOf((*MockSlack)(nil).GetConversationHistoryContext), ctx, params)
}

// GetConversationInfoContext mocks base method.
func (m *MockSlack) GetConversationInfoContext(ctx context.Context, input *slack.GetConversationInfoInput) (*slack.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationInfoContext", ctx, input)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationInfoContext indicates an expected call of GetConversationInfoContext.
func (mr *MockSlackMockRecorder) GetConversationInfoContext(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationInfoContext", reflect.TypeOf((*MockSlack)(nil).GetConversationInfoContext), ctx, input)
}

// GetConversationRepliesContext mocks base method.
func (m *MockSlack) GetConversationRepliesContext(ctx context.Context, params *slack.GetConversationRepliesParameters) ([]slack.Message, bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationRepliesContext", ctx, params)
	ret0, _ := ret[0].([]slack.Message)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetConversationRepliesContext indicates an expected call of GetConversationRepliesContext.
func (mr *MockSlackMockRecorder) GetConversationRepliesContext(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationRepliesContext", reflect.TypeOf((*MockSlack)(nil).GetConversationRepliesContext), ctx, params)
}

// GetConversationsContext mocks base method.
func (m *MockSlack) GetConversationsContext(ctx context.Context, params *slack.GetConversationsParameters) ([]slack.Channel, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationsContext", ctx, params)
	ret0, _ := ret[0].([]slack.Channel)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConversationsContext indicates an expected call of GetConversationsContext.
func (mr *MockSlackMockRecorder) GetConversationsContext(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationsContext", reflect.TypeOf((*MockSlack)(nil).GetConversationsContext), ctx, params)
}

// GetEmojiContext mocks base method.
func (m *MockSlack) GetEmojiContext(ctx context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmojiContext", ctx)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmojiContext indicates an expected call of GetEmojiContext.
func (mr *MockSlackMockRecorder) GetEmojiContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmojiContext", reflect.TypeOf((*MockSlack)(nil).GetEmojiContext), ctx)
}

// GetFileContext mocks base method.
func (m *MockSlack) GetFileContext(ctx context.Context, downloadURL string, writer io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileContext", ctx, downloadURL, writer)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFileContext indicates an expected call of GetFileContext.
func (mr *MockSlackMockRecorder) GetFileContext(ctx, downloadURL, writer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileContext", reflect.TypeOf((*MockSlack)(nil).GetFileContext), ctx, downloadURL, writer)
}

// GetFileInfoContext mocks base method.
func (m *MockSlack) GetFileInfoContext(ctx context.Context, fileID string, count, page int) (*slack.File, []slack.Comment, *slack.Paging, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfoContext", ctx, fileID, count, page)
	ret0, _ := ret[0].(*slack.File)
	ret1, _ := ret[1].([]slack.Comment)
	ret2, _ := ret[2].(*slack.Paging)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetFileInfoContext indicates an expected call of GetFileInfoContext.
func (mr *MockSlackMockRecorder) GetFileInfoContext(ctx, fileID, count, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfoContext", reflect.TypeOf((*MockSlack)(nil).GetFileInfoContext), ctx, fileID, count, page)
}

// GetStarredContext mocks base method.
func (m *MockSlack) GetStarredContext(ctx context.Context, params slack.StarsParameters) ([]slack.StarredItem, *slack.Paging, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStarredContext", ctx, params)
	ret0, _ := ret[0].([]slack.StarredItem)
	ret1, _ := ret[1].(*slack.Paging)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStarredContext indicates an expected call of GetStarredContext.
func (mr *MockSlackMockRecorder) GetStarredContext(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStarredContext", reflect.TypeOf((*MockSlack)(nil).GetStarredContext), ctx, params)
}

// GetUserInfoContext mocks base method.
func (m *MockSlack) GetUserInfoContext(ctx context.Context, user string) (*slack.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoContext", ctx, user)
	ret0, _ := ret[0].(*slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoContext indicates an expected call of GetUserInfoContext.
func (mr *MockSlackMockRecorder) GetUserInfoContext(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoContext", reflect.TypeOf((*MockSlack)(nil).GetUserInfoContext), ctx, user)
}

// GetUsersContext mocks base method.
func (m *MockSlack) GetUsersContext(ctx context.Context, options ...slack.GetUsersOption) ([]slack.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsersContext", varargs...)
	ret0, _ := ret[0].([]slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersContext indicates an expected call of GetUsersContext.
func (mr *MockSlackMockRecorder) GetUsersContext(ctx any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersContext", reflect.TypeOf((*MockSlack)(nil).GetUsersContext), varargs...)
}

// GetUsersInConversationContext mocks base method.
func (m *MockSlack) GetUsersInConversationContext(ctx context.Context, params *slack.GetUsersInConversationParameters) ([]string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersInConversationContext", ctx, params)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUsersInConversationContext indicates an expected call of GetUsersInConversationContext.
func (mr *MockSlackMockRecorder) GetUsersInConversationContext(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersInConversationContext", reflect.TypeOf((*MockSlack)(nil).GetUsersInConversationContext), ctx, params)
}

// GetUsersPaginated mocks base method.
func (m *MockSlack) GetUsersPaginated(options ...slack.GetUsersOption) slack.UserPagination {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsersPaginated", varargs...)
	ret0, _ := ret[0].(slack.UserPagination)
	return ret0
}

// GetUsersPaginated indicates an expected call of GetUsersPaginated.
func (mr *MockSlackMockRecorder) GetUsersPaginated(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersPaginated", reflect.TypeOf((*MockSlack)(nil).GetUsersPaginated), options...)
}

// ListBookmarks mocks base method.
func (m *MockSlack) ListBookmarks(channelID string) ([]slack.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBookmarks", channelID)
	ret0, _ := ret[0].([]slack.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBookmarks indicates an expected call of ListBookmarks.
func (mr *MockSlackMockRecorder) ListBookmarks(channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBookmarks", reflect.TypeOf((*MockSlack)(nil).ListBookmarks), channelID)
}

// SearchFilesContext mocks base method.
func (m *MockSlack) SearchFilesContext(ctx context.Context, query string, params slack.SearchParameters) (*slack.SearchFiles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFilesContext", ctx, query, params)
	ret0, _ := ret[0].(*slack.SearchFiles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFilesContext indicates an expected call of SearchFilesContext.
func (mr *MockSlackMockRecorder) SearchFilesContext(ctx, query, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilesContext", reflect.TypeOf((*MockSlack)(nil).SearchFilesContext), ctx, query, params)
}

// SearchMessagesContext mocks base method.
func (m *MockSlack) SearchMessagesContext(ctx context.Context, query string, params slack.SearchParameters) (*slack.SearchMessages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMessagesContext", ctx, query, params)
	ret0, _ := ret[0].(*slack.SearchMessages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMessagesContext indicates an expected call of SearchMessagesContext.
func (mr *MockSlackMockRecorder) SearchMessagesContext(ctx, query, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMessagesContext", reflect.TypeOf((*MockSlack)(nil).SearchMessagesContext), ctx, query, params)
}

// MockSlackEdge is a mock of SlackEdge interface.
type MockSlackEdge struct {
	ctrl     *gomock.Controller
	recorder *MockSlackEdgeMockRecorder
	isgomock struct{}
}

// MockSlackEdgeMockRecorder is the mock recorder for MockSlackEdge.
type MockSlackEdgeMockRecorder struct {
	mock *MockSlackEdge
}

// NewMockSlackEdge creates a new mock instance.
func NewMockSlackEdge(ctrl *gomock.Controller) *MockSlackEdge {
	mock := &MockSlackEdge{ctrl: ctrl}
	mock.recorder = &MockSlackEdgeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlackEdge) EXPECT() *MockSlackEdgeMockRecorder {
	return m.recorder
}

// AuthTestContext mocks base method.
func (m *MockSlackEdge) AuthTestContext(ctx context.Context) (*slack.AuthTestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthTestContext", ctx)
	ret0, _ := ret[0].(*slack.AuthTestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTestContext indicates an expected call of AuthTestContext.
func (mr *MockSlackEdgeMockRecorder) AuthTestContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTestContext", reflect.TypeOf((*MockSlackEdge)(nil).AuthTestContext), ctx)
}

// Client mocks base method.
func (m *MockSlackEdge) Client() (*slack.Client, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(*slack.Client)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Client indicates an expected call of Client.
func (mr *MockSlackEdgeMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockSlackEdge)(nil).Client))
}

// Edge mocks base method.
func (m *MockSlackEdge) Edge() (*edge.Client, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edge")
	ret0, _ := ret[0].(*edge.Client)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Edge indicates an expected call of Edge.
func (mr *MockSlackEdgeMockRecorder) Edge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edge", reflect.TypeOf((*MockSlackEdge)(nil).Edge))
}

// GetConversationHistoryContext mocks base method.
func (m *MockSlackEdge) GetConversationHistoryContext(ctx context.Context, params *slack.GetConversationHistoryParameters) (*slack.GetConversationHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationHistoryContext", ctx, params)
	ret0, _ := ret[0].(*slack.GetConversationHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationHistoryContext indicates an expected call of GetConversationHistoryContext.
func (mr *MockSlackEdgeMockRecorder) GetConversationHistoryContext(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationHistoryContext", reflect.TypeOf((*MockSlackEdge)(nil).GetConversationHistoryContext), ctx, params)
}

// GetConversationInfoContext mocks base method.
func (m *MockSlackEdge) GetConversationInfoContext(ctx context.Context, input *slack.GetConversationInfoInput) (*slack.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationInfoContext", ctx, input)
	ret0, _ := ret[0].(*slack.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationInfoContext indicates an expected call of GetConversationInfoContext.
func (mr *MockSlackEdgeMockRecorder) GetConversationInfoContext(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationInfoContext", reflect.TypeOf((*MockSlackEdge)(nil).GetConversationInfoContext), ctx, input)
}

// GetConversationRepliesContext mocks base method.
func (m *MockSlackEdge) GetConversationRepliesContext(ctx context.Context, params *slack.GetConversationRepliesParameters) ([]slack.Message, bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationRepliesContext", ctx, params)
	ret0, _ := ret[0].([]slack.Message)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetConversationRepliesContext indicates an expected call of GetConversationRepliesContext.
func (mr *MockSlackEdgeMockRecorder) GetConversationRepliesContext(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationRepliesContext", reflect.TypeOf((*MockSlackEdge)(nil).GetConversationRepliesContext), ctx, params)
}

// GetConversationsContext mocks base method.
func (m *MockSlackEdge) GetConversationsContext(ctx context.Context, params *slack.GetConversationsParameters) ([]slack.Channel, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationsContext", ctx, params)
	ret0, _ := ret[0].([]slack.Channel)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConversationsContext indicates an expected call of GetConversationsContext.
func (mr *MockSlackEdgeMockRecorder) GetConversationsContext(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationsContext", reflect.TypeOf((*MockSlackEdge)(nil).GetConversationsContext), ctx, params)
}

// GetEmojiContext mocks base method.
func (m *MockSlackEdge) GetEmojiContext(ctx context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmojiContext", ctx)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmojiContext indicates an expected call of GetEmojiContext.
func (mr *MockSlackEdgeMockRecorder) GetEmojiContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmojiContext", reflect.TypeOf((*MockSlackEdge)(nil).GetEmojiContext), ctx)
}

// GetFileContext mocks base method.
func (m *MockSlackEdge) GetFileContext(ctx context.Context, downloadURL string, writer io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileContext", ctx, downloadURL, writer)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFileContext indicates an expected call of GetFileContext.
func (mr *MockSlackEdgeMockRecorder) GetFileContext(ctx, downloadURL, writer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileContext", reflect.TypeOf((*MockSlackEdge)(nil).GetFileContext), ctx, downloadURL, writer)
}

// GetFileInfoContext mocks base method.
func (m *MockSlackEdge) GetFileInfoContext(ctx context.Context, fileID string, count, page int) (*slack.File, []slack.Comment, *slack.Paging, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfoContext", ctx, fileID, count, page)
	ret0, _ := ret[0].(*slack.File)
	ret1, _ := ret[1].([]slack.Comment)
	ret2, _ := ret[2].(*slack.Paging)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetFileInfoContext indicates an expected call of GetFileInfoContext.
func (mr *MockSlackEdgeMockRecorder) GetFileInfoContext(ctx, fileID, count, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfoContext", reflect.TypeOf((*MockSlackEdge)(nil).GetFileInfoContext), ctx, fileID, count, page)
}

// GetStarredContext mocks base method.
func (m *MockSlackEdge) GetStarredContext(ctx context.Context, params slack.StarsParameters) ([]slack.StarredItem, *slack.Paging, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStarredContext", ctx, params)
	ret0, _ := ret[0].([]slack.StarredItem)
	ret1, _ := ret[1].(*slack.Paging)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStarredContext indicates an expected call of GetStarredContext.
func (mr *MockSlackEdgeMockRecorder) GetStarredContext(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStarredContext", reflect.TypeOf((*MockSlackEdge)(nil).GetStarredContext), ctx, params)
}

// GetUserInfoContext mocks base method.
func (m *MockSlackEdge) GetUserInfoContext(ctx context.Context, user string) (*slack.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoContext", ctx, user)
	ret0, _ := ret[0].(*slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoContext indicates an expected call of GetUserInfoContext.
func (mr *MockSlackEdgeMockRecorder) GetUserInfoContext(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoContext", reflect.TypeOf((*MockSlackEdge)(nil).GetUserInfoContext), ctx, user)
}

// GetUsersContext mocks base method.
func (m *MockSlackEdge) GetUsersContext(ctx context.Context, options ...slack.GetUsersOption) ([]slack.User, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsersContext", varargs...)
	ret0, _ := ret[0].([]slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersContext indicates an expected call of GetUsersContext.
func (mr *MockSlackEdgeMockRecorder) GetUsersContext(ctx any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersContext", reflect.TypeOf((*MockSlackEdge)(nil).GetUsersContext), varargs...)
}

// GetUsersInConversationContext mocks base method.
func (m *MockSlackEdge) GetUsersInConversationContext(ctx context.Context, params *slack.GetUsersInConversationParameters) ([]string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersInConversationContext", ctx, params)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUsersInConversationContext indicates an expected call of GetUsersInConversationContext.
func (mr *MockSlackEdgeMockRecorder) GetUsersInConversationContext(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersInConversationContext", reflect.TypeOf((*MockSlackEdge)(nil).GetUsersInConversationContext), ctx, params)
}

// GetUsersPaginated mocks base method.
func (m *MockSlackEdge) GetUsersPaginated(options ...slack.GetUsersOption) slack.UserPagination {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsersPaginated", varargs...)
	ret0, _ := ret[0].(slack.UserPagination)
	return ret0
}

// GetUsersPaginated indicates an expected call of GetUsersPaginated.
func (mr *MockSlackEdgeMockRecorder) GetUsersPaginated(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersPaginated", reflect.TypeOf((*MockSlackEdge)(nil).GetUsersPaginated), options...)
}

// ListBookmarks mocks base method.
func (m *MockSlackEdge) ListBookmarks(channelID string) ([]slack.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBookmarks", channelID)
	ret0, _ := ret[0].([]slack.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBookmarks indicates an expected call of ListBookmarks.
func (mr *MockSlackEdgeMockRecorder) ListBookmarks(channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBookmarks", reflect.TypeOf((*MockSlackEdge)(nil).ListBookmarks), channelID)
}

// SearchFilesContext mocks base method.
func (m *MockSlackEdge) SearchFilesContext(ctx context.Context, query string, params slack.SearchParameters) (*slack.SearchFiles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFilesContext", ctx, query, params)
	ret0, _ := ret[0].(*slack.SearchFiles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFilesContext indicates an expected call of SearchFilesContext.
func (mr *MockSlackEdgeMockRecorder) SearchFilesContext(ctx, query, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFilesContext", reflect.TypeOf((*MockSlackEdge)(nil).SearchFilesContext), ctx, query, params)
}

// SearchMessagesContext mocks base method.
func (m *MockSlackEdge) SearchMessagesContext(ctx context.Context, query string, params slack.SearchParameters) (*slack.SearchMessages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMessagesContext", ctx, query, params)
	ret0, _ := ret[0].(*slack.SearchMessages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMessagesContext indicates an expected call of SearchMessagesContext.
func (mr *MockSlackEdgeMockRecorder) SearchMessagesContext(ctx, query, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMessagesContext", reflect.TypeOf((*MockSlackEdge)(nil).SearchMessagesContext), ctx, query, params)
}
